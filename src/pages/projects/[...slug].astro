---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import ThemeToggle from "../../components/shared/ThemeToggle.astro";

export async function getStaticPaths() {
    const projectEntries = await getCollection("projects");
    return projectEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Format date
function formatDate(date) {
    return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
    });
}
---

<Layout title={`${entry.data.title} | Portfolio | Naman Shukla`}>
    <ThemeToggle />

    <div class="max-w-4xl mx-auto px-4 pt-16 pb-10">
        {/* Navigation Bar */}
        <div class="flex items-center justify-between mb-6">
            <a
                href="/"
                class="btn-rounded bg-secondary dark:bg-darkSecondary flex items-center text-white"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    class="w-4 h-4 mr-1"
                >
                    <path
                        fill-rule="evenodd"
                        d="M17 10a.75.75 0 01-.75.75H5.612l4.158 3.96a.75.75 0 11-1.04 1.08l-5.5-5.25a.75.75 0 010-1.08l5.5-5.25a.75.75 0 111.04 1.08L5.612 9.25H16.25A.75.75 0 0117 10z"
                        clip-rule="evenodd"></path>
                </svg>
                Back
            </a>

            {/* Project Links */}
            <div class="flex gap-2">
                {
                    entry.data.demoUrl && (
                        <a
                            href={entry.data.demoUrl}
                            target="_blank"
                            class="btn-rounded bg-tertiary dark:bg-darkTertiary text-white"
                        >
                            Demo
                        </a>
                    )
                }
                {
                    entry.data.repoUrl && (
                        <a
                            href={entry.data.repoUrl}
                            target="_blank"
                            class="btn-rounded"
                        >
                            Repository
                        </a>
                    )
                }
            </div>
        </div>

        {/* Project Image with Title Overlay */}
        <div class="w-full mb-8 relative">
            {
                entry.data.image ? (
                    <div class="relative rounded-lg overflow-hidden shadow-md">
                        <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-black/20 z-10" />
                        <img
                            src={entry.data.image}
                            alt={entry.data.title}
                            class="w-full h-64 sm:h-80 object-cover"
                        />
                        <div class="absolute inset-0 z-20 flex flex-col justify-end p-6">
                            <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-white font-eb-garamond mb-3">
                                {entry.data.title}
                            </h1>
                            <div class="flex items-center justify-between flex-wrap gap-y-2">
                                <div class="text-sm text-white/90">
                                    {formatDate(entry.data.pubDate)}
                                </div>

                                {/* Tags */}
                                {entry.data.tags &&
                                    entry.data.tags.length > 0 && (
                                        <div class="flex flex-wrap gap-2">
                                            {entry.data.tags.map((tag) => (
                                                <span class="bg-white/20 backdrop-blur-sm text-xs px-2 py-0.5 rounded-full text-white">
                                                    {tag}
                                                </span>
                                            ))}
                                        </div>
                                    )}
                            </div>
                        </div>
                    </div>
                ) : (
                    <div class="rounded-lg bg-gradient-to-r from-primary/10 to-secondary/10 dark:from-darkPrimary/10 dark:to-darkSecondary/10 p-6 mb-6">
                        <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-text dark:text-darkText font-eb-garamond mb-3">
                            {entry.data.title}
                        </h1>
                        <div class="flex items-center justify-between flex-wrap gap-y-2">
                            <div class="text-sm text-mutedText dark:text-darkMutedText">
                                {formatDate(entry.data.pubDate)}
                            </div>

                            {/* Tags */}
                            {entry.data.tags && entry.data.tags.length > 0 && (
                                <div class="flex flex-wrap gap-2">
                                    {entry.data.tags.map((tag) => (
                                        <span class="badge-secondary text-xs px-2 py-0.5 rounded-full">
                                            {tag}
                                        </span>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )
            }
        </div>

        <article
            class="prose prose-slate dark:prose-invert max-w-none prose-headings:font-eb-garamond prose-headings:font-medium prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg prose-p:font-spectral prose-p:text-base prose-p:text-text dark:prose-p:text-darkText prose-a:text-primary dark:prose-a:text-darkPrimary prose-a:no-underline hover:prose-a:underline prose-img:rounded-lg prose-code:text-sm prose-code:bg-gray-100 dark:prose-code:bg-gray-800 prose-code:p-1 prose-code:rounded"
        >
            <Content />
        </article>
    </div>
</Layout>

<style>
    /* Override theme toggle z-index to ensure it's above all content */
    :global(#theme-toggle) {
        z-index: 50 !important;
    }
</style>
